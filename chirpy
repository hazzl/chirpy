#!/usr/bin/python3
import sys
from PyQt5.QtCore import QUrl, QObject, Qt
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent, QMediaPlaylist
from PyQt5.QtWidgets import QApplication
from PyQt5.QtQuick import QQuickView, QQuickItem
from PyQt5.QtQml import QQmlApplicationEngine
import sqlite3
from sqlistmodel import sqlistmodel, playlistmodel

def updateCItem(pos):
    qmlPlaylist.setProperty("currentIndex", pos)
def updatePList():
    genre = int(cgenre.property("uid"))
    artist = int(cartist.property("uid"))
    album = int(calbum.property("uid"))
    query = "SELECT DISTINCT s.name, s.path FROM songs s "
    where = '' 
    if genre:
        query += "INNER JOIN song_genres g ON g.song_id=s.id "
        where += "g.genre_id="+str(genre)+" "
    if artist:
        query += "INNER JOIN song_artists a ON a.song_id=s.id "
        if where!='':
            where += "AND "
        where += "a.artist_id="+str(artist)+" "
    if album:
        if where!='':
            where += "AND "
        where += "s.album="+str(album)+" "
    if where!='':
        where = "WHERE "+where
    plistModel.updateData(query+where+"ORDER BY s.album,s.trackno ASC LIMIT 30")
    playlist = song.playlist()
    if playlist is None:
        playlist=QMediaPlaylist(song)
        song.setPlaylist(playlist)
        playlist.currentIndexChanged.connect(updateCItem)
        qmlPlaylist.clicked.connect(playlist.setCurrentIndex)
    playlist.clear()
    for entry in plistModel.getList():
        playlist.addMedia(QMediaContent(QUrl.fromLocalFile(entry[1]))) 
def updateArtists():
    genre = int(cgenre.property("uid"))
    if genre:
        artistModel.updateData("""SELECT DISTINCT a.id, a.name
           FROM song_genres g INNER JOIN songs s ON g.song_id = s.id
           INNER JOIN song_artists sa USING (song_id)
           INNER JOIN artists a ON a.id = sa.artist_id
           WHERE g.genre_id = """+str(genre)+" ORDER BY a.name ASC")
    else:
        artistModel.updateData("SELECT id,name FROM artists ORDER BY name ASC")
def updateAlbums():
    genre = int(cgenre.property("uid"))
    artist = int(cartist.property("uid"))
    qfrom = ""
    where = ""
    if artist:
      qfrom = "song_artists sa INNER JOIN songs s ON sa.song_id=s.id "
      where = "sa.artist_id={} ".format(artist)
    if genre:
      if qfrom:
        qfrom += "INNER JOIN song_genres g ON g.song_id=s.id "
        where += "AND "
      else:
        qfrom = "song_genres g INNER JOIN songs s ON g.song_id=s.id "
      where += "g.genre_id={} ".format(genre)
    if qfrom:
      qfrom += "INNER JOIN albums a ON a.id=s.album "
    else:
      qfrom = "albums a "
    query="SELECT DISTINCT a.id, a.name FROM "+qfrom
    if where:
      query += "WHERE "+where
    query += "ORDER BY a.name ASC"
    albumModel.updateData(query)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    engine = QQmlApplicationEngine(app)
    engine.quit.connect(app.quit)
    app.lastWindowClosed.connect(app.quit)
    context = engine.rootContext()

    conn = sqlite3.connect('chirpy.sqlite')
    genreModel = sqlistmodel(conn)
    genreModel.updateData("SELECT id,name FROM genres ORDER BY name ASC")
    context.setContextProperty('genreModel', genreModel)
    artistModel = sqlistmodel(conn)
    context.setContextProperty('artistModel', artistModel)
    albumModel = sqlistmodel(conn)
    context.setContextProperty('albumModel', albumModel)
    plistModel = playlistmodel(conn)
    context.setContextProperty('plistModel', plistModel)

    song = QMediaPlayer()
    context.setContextProperty('song', song)

    qv = QQuickView(engine,None)
    qv.setSource(QUrl('chirpy.qml'))

    root = qv.rootObject()
    cgenre = root.findChild(QQuickItem, "currentGenre")
    calbum = root.findChild(QQuickItem, "currentAlbum")
    cartist = root.findChild(QQuickItem, "currentArtist")
    qmlPlaylist = root.findChild(QQuickItem, "playList")
    cgenre.uidChanged.connect(updateAlbums)
    cgenre.uidChanged.connect(updateArtists)
    cgenre.uidChanged.connect(updatePList)
    cartist.uidChanged.connect(updateAlbums)
    cartist.uidChanged.connect(updatePList)
    calbum.uidChanged.connect(updatePList)
    updateArtists()
    updateAlbums()
    updatePList()

    qv.show()

    sys.exit(app.exec_())
