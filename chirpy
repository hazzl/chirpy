#!/usr/bin/python3
import sys
import os.path as Path
from PyQt5.QtCore import QUrl, QObject, Qt
from PyQt5.QtWidgets import QApplication
from PyQt5.QtGui import QCursor
from PyQt5.QtQuick import QQuickView, QQuickItem
from PyQt5.QtQml import QQmlApplicationEngine
import sqlite3
from sqlistmodel import sqlistmodel, playlistmodel, albumlistmodel
from chirpyplayer import chirpyPlayer
from config import configHandler

def newSongClicked(pos):
    played = song.position()
    if played > 2500:
        song.skipped = True
    song.playlist().setCurrentIndex(pos)
def checkSkipped():
    if song.previousId != 0:
        if not song.skipped:
            if song.position() > max(song.duration()-3000,1):
                plistModel.recordPlayed(song.previousId)
        else:
            plistModel.recordSkipped(song.previousId)
def updateCItem(pos):
    checkSkipped()
    song.previousId = plistModel.data(plistModel.index(pos, 0), Qt.UserRole+1)
    qmlPlaylist.setProperty("currentIndex", pos)
    if pos==-1:
        return
    songpath = plistModel.data(plistModel.index(pos,0), Qt.UserRole)
    newcover = Path.join(Path.dirname(songpath),"album.jpg")
    oldcover = QUrl.toLocalFile(cover.property("source"))
    if newcover != oldcover:
        if not Path.isfile(newcover):
            newcover = None
        cover.setProperty("source", QUrl.fromLocalFile(newcover))
def getGenre():
    return genreModel.data(
        genreModel.index(cgenre.property("currentIndex"),0), Qt.UserRole)
def getArtist():
    return artistModel.data(
        artistModel.index(cartist.property("currentIndex"),0), Qt.UserRole)
def getAlbum():
    return albumModel.data(
        albumModel.index(calbum.property("currentIndex"),0), Qt.UserRole)
def updatePList():
    checkSkipped()
    genre = getGenre()
    artist = getArtist()
    album = getAlbum()
    query = """SELECT DISTINCT s.name, s.path, s.id FROM songs s INNER JOIN
		albums b ON s.album = b.id """
    where = '' 
    if genre:
        query += "INNER JOIN song_genres g ON g.song_id=s.id "
        where += "g.genre_id={} ".format(genre)
    if artist:
        query += "INNER JOIN song_artists a ON a.song_id=s.id "
        if where!='':
            where += "AND "
        where += "a.artist_id={} ".format(artist)
    if album:
        if where!='':
            where += "AND "
        where += "s.album={} ".format(album)
    if where!='':
        where = "WHERE "+where
    query += where+"ORDER BY b.lastplayed,s.album,s.trackno LIMIT 64"
    plistModel.updateData(query)
    song.replacePlaylist(plistModel)
def updateArtists():
    genre = getGenre()
    query = "SELECT DISTINCT a.id, a.name FROM "
    if genre:
        query += """song_genres g INNER JOIN songs s ON g.song_id = s.id
           INNER JOIN song_artists sa USING (song_id)
           INNER JOIN artists a ON a.id = sa.artist_id
           WHERE g.genre_id="""+str(genre)
    else:
        query += "artists a"
    artistModel.updateData(query +" ORDER BY upper(a.name)")
def updateAlbums():
    genre = getGenre()
    artist = getArtist()
    query = ""
    where = ""
    if artist:
      query = "song_artists sa INNER JOIN songs s ON sa.song_id=s.id "
      where = "sa.artist_id={} ".format(artist)
    if genre:
      if query:
        query += "INNER JOIN song_genres g ON g.song_id=s.id "
        where += "AND " # query != None therefore where != None
      else:
        query = "song_genres g INNER JOIN songs s ON g.song_id=s.id "
      where += "g.genre_id={} ".format(genre)
    if query:
      query += "INNER JOIN albums a ON a.id=s.album "
    else:
      query = "albums a "
    cquery="SELECT DISTINCT a.id,a.name,c.name AS cat FROM "+query+"JOIN categories c ON a.category=c.id "
    if where:
      cquery += "WHERE "+where
    cquery += "UNION ALL SELECT DISTINCT a.id,a.name,'' AS cat FROM "+query
    if where:
      cquery += "WHERE "+where+"AND "
    else:
      cquery += "WHERE "
    cquery += "a.category IS NULL "
    albumModel.updateData(cquery+"ORDER BY cat DESC, a.name")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    engine = QQmlApplicationEngine(app)
    engine.quit.connect(app.quit)
    app.lastWindowClosed.connect(app.quit)
    context = engine.rootContext()

    conn = sqlite3.connect('chirpy.sqlite')
    conf = configHandler(conn)
    if conf.get("hidePointer"):
        app.setOverrideCursor( QCursor( Qt.BlankCursor ) )

    genreModel = sqlistmodel(conn)
    genreModel.updateData("SELECT id,name FROM genres ORDER BY name ASC")
    context.setContextProperty('genreModel', genreModel)
    artistModel = sqlistmodel(conn)
    context.setContextProperty('artistModel', artistModel)
    albumModel = albumlistmodel(conn)
    context.setContextProperty('albumModel', albumModel)
    plistModel = playlistmodel(conn)
    context.setContextProperty('plistModel', plistModel)

    song = chirpyPlayer()
    context.setContextProperty('song', song)

    qv = QQuickView(engine,None)
    qv.setSource(QUrl('chirpy.qml'))

    root = qv.rootObject()
    cgenre = root.findChild(QQuickItem, "genreList")
    cgenre.currentIndexChanged.connect(updateArtists)
    cgenre.currentIndexChanged.connect(updateAlbums)
    cgenre.currentIndexChanged.connect(updatePList)
    calbum = root.findChild(QQuickItem, "albumList")
    calbum.currentIndexChanged.connect(updatePList)
    cartist = root.findChild(QQuickItem, "artistList")
    cartist.currentIndexChanged.connect(updateAlbums)
    cartist.currentIndexChanged.connect(updatePList)
    qmlPlaylist = root.findChild(QQuickItem, "playList")
    updateArtists()
    updateAlbums()
    updatePList()
    cover = root.findChild(QQuickItem, "cover")
    root.findChild(QQuickItem, "slider").pressedChanged.connect(song.setSkipped)
    song.playlist().currentIndexChanged.connect(updateCItem)
    qmlPlaylist.clicked.connect(newSongClicked)

    qv.show()

    sys.exit(app.exec_())
